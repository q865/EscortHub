// SMS —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SMS.ru, Twilio, –∏–ª–∏ –¥—Ä—É–≥–æ–π SMS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä

export interface SMSData {
  phone: string;
  message: string;
}

export interface NotificationData {
  clientName: string;
  clientEmail: string;
  clientPhone?: string;
  service?: string;
  message?: string;
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è SMS API (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
const SMS_API_URL = 'https://sms.ru/sms/send';
const SMS_API_KEY = 'your_sms_api_key';

export const sendSMS = async (data: SMSData): Promise<boolean> => {
  try {
    // –ü—Ä–∏–º–µ—Ä –¥–ª—è SMS.ru API
    const response = await fetch(SMS_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        api_id: SMS_API_KEY,
        to: data.phone,
        msg: data.message,
        json: 1,
      }),
    });

    const result = await response.json();
    console.log('SMS sent:', result);
    return result.status === 'OK';
  } catch (error) {
    console.error('Failed to send SMS:', error);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
export const sendManagerNotification = async (data: NotificationData): Promise<boolean> => {
  const managerPhone = '+79991234567'; // –ù–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  
  const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ EscortHub
üë§ –ö–ª–∏–µ–Ω—Ç: ${data.clientName}
üìß Email: ${data.clientEmail}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.clientPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üíº –£—Å–ª—É–≥–∞: ${data.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`;

  return await sendSMS({
    phone: managerPhone,
    message: message
  });
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
export const sendClientConfirmation = async (clientPhone: string, clientName: string): Promise<boolean> => {
  const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${clientName}! 

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ EscortHub –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!
EscortHub Team`;

  return await sendSMS({
    phone: clientPhone,
    message: message
  });
};
